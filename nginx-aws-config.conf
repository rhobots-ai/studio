# Nginx configuration for LaaP Studio with AWS Load Balancer SSL termination
# This configuration assumes AWS ALB handles SSL and forwards HTTP to this server

# Map deployment IDs to backend ports
# This file is auto-generated by scripts/generate-nginx-map.py
map $deployment_id $backend_port {
    include /etc/nginx/deployment-map.conf;
}

# Main HTTP server (receives traffic from AWS Load Balancer)
server {
    listen 80;
    server_name deepcite.in www.deepcite.in;

    # Trust AWS Load Balancer forwarded headers
    real_ip_header X-Forwarded-For;
    set_real_ip_from 10.0.0.0/8;     # AWS VPC private IP ranges
    set_real_ip_from 172.16.0.0/12;  # AWS VPC private IP ranges
    set_real_ip_from 192.168.0.0/16; # AWS VPC private IP ranges

    # Security headers (since we're behind ALB)
    add_header X-Frame-Options DENY always;
    add_header X-Content-Type-Options nosniff always;
    add_header X-XSS-Protection "1; mode=block" always;
    
    # Add HSTS only if request came through HTTPS at ALB level
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Main application (your existing LaaP Studio frontend)
    location / {
        proxy_pass http://localhost:5173;  # Vite dev server or built app
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
        
        # WebSocket support for Vite HMR
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
    }

    # API routes for the main application (FastAPI backend)
    location /api/ {
        # Exclude deployment routes from this block
        location ~ ^/api/deploy/ {
            # This will be handled by the deployment routing block below
            return 404;
        }
        
        proxy_pass http://localhost:8000;  # your FastAPI backend
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
        
        # Timeout settings for API calls
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }

    # Deployment routing - the main feature for AI model deployments
    location ~ ^/api/deploy/([a-f0-9-]+)(/.*)?$ {
        set $deployment_id $1;
        set $path $2;
        
        # Check if we have a valid backend port for this deployment
        if ($backend_port = 0) {
            return 404 "Deployment not found or not running";
        }
        
        # Proxy to the correct backend port
        proxy_pass http://localhost:$backend_port$path;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $http_x_forwarded_proto;
        proxy_set_header X-Deployment-ID $deployment_id;
        
        # Timeout settings optimized for AI model inference
        proxy_connect_timeout 30s;
        proxy_send_timeout 300s;  # 5 minutes for long-running inference
        proxy_read_timeout 300s;  # 5 minutes for long-running inference
        
        # Buffer settings for streaming responses (important for AI models)
        proxy_buffering off;
        proxy_request_buffering off;
        
        # CORS headers for API access
        add_header Access-Control-Allow-Origin * always;
        add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
        add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin * always;
            add_header Access-Control-Allow-Methods "GET, POST, OPTIONS" always;
            add_header Access-Control-Allow-Headers "Content-Type, Authorization, X-Requested-With" always;
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type 'text/plain charset=UTF-8';
            add_header Content-Length 0;
            return 204;
        }
    }

    # Health check endpoint (for ALB health checks)
    location /health {
        access_log off;
        return 200 "healthy\n";
        add_header Content-Type text/plain;
    }

    # ALB health check endpoint (alternative path)
    location /healthcheck {
        access_log off;
        return 200 "OK";
        add_header Content-Type text/plain;
    }

    # Nginx status (optional, for monitoring)
    location /nginx_status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow 10.0.0.0/8;    # Allow AWS VPC
        deny all;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        internal;
        return 404 "Not Found";
    }
    
    location = /50x.html {
        internal;
        return 500 "Internal Server Error";
    }
}

# Custom log format for deployment access tracking
log_format deployment_access '$remote_addr - $remote_user [$time_local] '
                            '"$request" $status $body_bytes_sent '
                            '"$http_referer" "$http_user_agent" '
                            'deployment_id="$deployment_id" backend_port="$backend_port" '
                            'forwarded_proto="$http_x_forwarded_proto"';

# Apply custom logging to deployment routes
access_log /var/log/nginx/deployment_access.log deployment_access;
